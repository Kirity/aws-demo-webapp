AWSTemplateFormatVersion: 2010-09-09
Description: The CloudFormation template to create the CodePipeline.
Parameters:
  Stage:
    Type: String
    Default: dev
    Description: Could be develop, qa, prod
  GithubFullRepo:
    Type: String
    Default: "Kirity/aws-demo-webapp"
  GithubBranch:
    Type: String
    Default: develop
  ContainerPort:
    Type: Number
    Default: 8080
  ProjectName:
    Type: String
    Default: "aws-demo-webapp"
  ECSStackName:
    Type: String
    Description: Name of ECS stack
    Default: "ecs-cluster"
  CodeInfrastructureStackName:
    Type: String
    Description: Name of code infrastructure stack
    Default: "web-app-code-infrastructure"
Resources:
  # Create an ECR Repository to store docker images
  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Join ['-', [!Ref Stage, !Ref 'ProjectName', 'ecr-repository']]
  # Create the BuildProject with required Build information
  BuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:2.0
        ImagePullCredentialsType: CODEBUILD
        PrivilegedMode: True
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: ECR_REPOSITORY_URI
            Value: !Join [ ".", [ !Ref "AWS::AccountId", "dkr.ecr", !Ref "AWS::Region", !Join [ "/", [ "amazonaws.com", !Ref "ECRRepository" ] ] ] ]
          - Name: AWS_ACCOUNT_ID
            Value: !Ref "AWS::AccountId"
          - Name: AWS_DEFAULT_REGION
            Value: !Ref "AWS::Region"
      Name: !Join ['-', [!Ref Stage, !Ref 'ProjectName', 'build-project']]
      ServiceRole:
        Fn::ImportValue: !Sub ${ECSStackName}-codepipeline-operations-role
      Source:
        Type: CODEPIPELINE
        # This file (buildspec.yml In Source code) contains commands
        # to Create and Push a docker image to the ECR_REPOSITORY_URI
        BuildSpec: buildspec.yml
  # Create CodePipeline with 3 stages (Source, Build and Deploy)
  CodePipeLine:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        Location:
          Fn::ImportValue: !Sub ${CodeInfrastructureStackName}-s3-bucket
        Type: S3
      Name: !Join ['-', [!Ref Stage, !Ref 'ProjectName']]
      RestartExecutionOnUpdate: False
      RoleArn:
        Fn::ImportValue: !Sub ${ECSStackName}-codepipeline-operations-role
      Stages:
        # Download source code from Github Repo to source-output-artifacts path in S3 Bucket
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeStarSourceConnection
                Version: 1
              Configuration:
                ConnectionArn: !Sub 'arn:aws:codestar-connections:eu-central-1:${AWS::AccountId}:connection/f4da8eb1-88e7-40ab-98f5-748f33849641'
                FullRepositoryId: !Ref GithubFullRepo
                BranchName: !Ref GithubBranch
              RunOrder: 1
              OutputArtifacts:
                - Name: source-output-artifacts

        # Build the project using the BuildProject and Output build artifacts to build-output-artifacts
        # path in S3 Bucket
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              OutputArtifacts:
                - Name: build-output-artifacts
              InputArtifacts:
                - Name: source-output-artifacts
              Configuration:
                ProjectName: !Ref BuildProject
              RunOrder: 1

        # Deploy the project by executing aws-webapp-fargate-template.yaml file
        #in the Source code with Cloudformation.
        - Name: Deploy
          Actions:
            - Name: Deploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: CloudFormation
              InputArtifacts:
                - Name: source-output-artifacts
                - Name: build-output-artifacts
              Configuration:
                ActionMode: CREATE_UPDATE
                Capabilities: CAPABILITY_NAMED_IAM
                # Pass parameter values to aws-webapp-fargate-template.yaml for deployment
                ParameterOverrides: !Sub |
                  {
                    "ImageURI" : { "Fn::GetParam" : ["build-output-artifacts", "imageDetail.json", "ImageURI"] },
                    "Stage":  "${Stage}",
                    "ContainerPort": "${ContainerPort}"
                  }
                RoleArn:
                  Fn::ImportValue: !Sub ${ECSStackName}-codepipeline-operations-role
                StackName: !Join ['-', [!Ref Stage,  !Ref 'ProjectName', 'ecs-fargate-cf-stack']]
                TemplatePath: source-output-artifacts::infrastructure/aws-webapp-fargate-template.yaml
              RunOrder: 1
Outputs:
  ECRRepository:
    Description: ECRRepository
    Value: !Ref ECRRepository
    Export:
      Name: ECRRepository
  CodePipeLine:
    Description: CodePipeLine
    Value: !Ref CodePipeLine
    Export:
      Name: CodePipeLine


